{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/KickStarter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./Proposal.sol\";\n\n// Errors ----------------------------------\nerror Err__Profit__Withdraw__Failed();\nerror Err__Donation__Fails();\nerror Err__Creating__Proposal__Failed(address);\nerror Err__Updating__Proposal__Failed(address);\nerror Err__Renewing__Proposal__Failed(address);\n\ncontract KickStarter is Ownable, ReentrancyGuard {\n\t// Interfaces or Types----------------------\n\n\t// Storage\n\tmapping(address => uint256) s_contracts;\n\t// Events ----------------------------------\n\tevent Evt__Donation(\n\t\taddress indexed donatorAddress,\n\t\taddress indexed contractAddress,\n\t\tuint256 indexed amount,\n\t\tuint256 timestamp\n\t);\n\tevent Evt__Donation__Withdraw(\n\t\taddress indexed account,\n\t\taddress indexed contractAdddress,\n\t\tuint256 timestamp\n\t);\n\tevent Evt__Profit__Withdraw(uint256 amount, uint256 timestamp);\n\n\tevent Evt__Fund__Withdrawed(\n\t\taddress indexed account,\n\t\taddress indexed contractAddress\n\t);\n\n\tevent Evt__Contract__Deployed(\n\t\taddress indexed account,\n\t\taddress indexed contractAddress,\n\t\tstring proposalName,\n\t\tstring idea,\n\t\tuint256 budgetInEth,\n\t\tuint256 expiryTime\n\t);\n\n\tevent Evt__Contract__Update__Deployed(\n\t\taddress indexed account,\n\t\taddress indexed contractAddress,\n\t\tstring proposalName,\n\t\tstring idea,\n\t\tuint256 budgetInEth\n\t);\n\n\tevent Evt__Comments(\n\t\taddress indexed account,\n\t\taddress indexed contractAddress,\n\t\tstring message,\n\t\tuint256 date\n\t);\n\n\tevent Evt__Renewed(\n\t\taddress indexed account,\n\t\taddress indexed contractAddress,\n\t\tuint256 renewedDate\n\t);\n\n\t// Modifiers--------------------------------\n\n\tconstructor() Ownable() ReentrancyGuard() {}\n\n\tfunction createProposal(\n\t\tstring memory proposalName,\n\t\tstring memory idea,\n\t\tstring memory details,\n\t\tuint256 budgetInEth\n\t) public payable {\n\t\tif (msg.value != 0.1 ether)\n\t\t\trevert Err__Creating__Proposal__Failed(tx.origin);\n\t\tuint256 time = block.timestamp;\n\t\tProposal contractDeployed = new Proposal(\n\t\t\tproposalName,\n\t\t\tidea,\n\t\t\tdetails,\n\t\t\tbudgetInEth,\n\t\t\ttime\n\t\t);\n\n\t\temit Evt__Contract__Deployed(\n\t\t\ttx.origin,\n\t\t\taddress(contractDeployed),\n\t\t\tproposalName,\n\t\t\tidea,\n\t\t\tbudgetInEth,\n\t\t\ttime + 30 days\n\t\t);\n\t}\n\n\tfunction updateProposal(\n\t\taddress contractAddress,\n\t\tstring memory proposalName,\n\t\tstring memory idea,\n\t\tstring memory details,\n\t\tuint256 budgetInEth\n\t) public payable {\n\t\tif (msg.value != 0.1 ether)\n\t\t\trevert Err__Updating__Proposal__Failed(tx.origin);\n\t\tProposal contractDeployed = Proposal(payable(address(contractAddress)));\n\t\tcontractDeployed.updateProposal(\n\t\t\tproposalName,\n\t\t\tidea,\n\t\t\tdetails,\n\t\t\tbudgetInEth\n\t\t);\n\n\t\temit Evt__Contract__Update__Deployed(\n\t\t\ttx.origin,\n\t\t\taddress(contractDeployed),\n\t\t\tproposalName,\n\t\t\tidea,\n\t\t\tbudgetInEth\n\t\t);\n\t}\n\n\tfunction renewProposal(address contractAddress) public payable {\n\t\tif (msg.value > 0.05 ether)\n\t\t\trevert Err__Renewing__Proposal__Failed(contractAddress);\n\t\tProposal contractDeployed = Proposal(payable(address(contractAddress)));\n\t\tcontractDeployed.renewProposal();\n\t\temit Evt__Renewed(\n\t\t\ttx.origin,\n\t\t\tcontractAddress,\n\t\t\tblock.timestamp + 30 days\n\t\t);\n\t}\n\n\tfunction donation(address contractAddress) public payable {\n\t\tif (msg.value <= 0) revert Err__Donation__Fails();\n\t\tProposal contractDeployed = Proposal(payable(address(contractAddress)));\n\t\tcontractDeployed.riseFund{ value: msg.value }();\n\t\temit Evt__Donation(\n\t\t\tmsg.sender,\n\t\t\tcontractAddress,\n\t\t\tmsg.value,\n\t\t\tblock.timestamp\n\t\t);\n\t}\n\n\tfunction withdrawDonation(address contractAddress) public {\n\t\tProposal contractDeployed = Proposal(payable(address(contractAddress)));\n\t\tcontractDeployed.withdrawDeposits();\n\t\temit Evt__Donation__Withdraw(\n\t\t\tmsg.sender,\n\t\t\tcontractAddress,\n\t\t\tblock.timestamp\n\t\t);\n\t}\n\n\tfunction withdrawFunds(address contractAddress) public nonReentrant {\n\t\tProposal contractDeployed = Proposal(payable(address(contractAddress)));\n\t\tcontractDeployed.withdrawFunds();\n\t\temit Evt__Fund__Withdrawed(tx.origin, contractAddress);\n\t}\n\n\tfunction withdrawProfit() public onlyOwner nonReentrant {\n\t\tif (address(this).balance <= 0) revert Err__Profit__Withdraw__Failed();\n\n\t\t(bool success, ) = payable(address(owner())).call{\n\t\t\tvalue: address(this).balance\n\t\t}(\"\");\n\t\tif (!success) revert Err__Profit__Withdraw__Failed();\n\t\temit Evt__Profit__Withdraw(address(this).balance, block.timestamp);\n\t}\n\n\tfunction comments(address contractAddress, string memory message) public {\n\t\temit Evt__Comments(\n\t\t\ttx.origin,\n\t\t\tcontractAddress,\n\t\t\tmessage,\n\t\t\tblock.timestamp\n\t\t);\n\t}\n\n\tfunction pauseContract(address contractAddress) public onlyOwner {\n\t\tProposal contractDeployed = Proposal(payable(address(contractAddress)));\n\t\tcontractDeployed.pauseContract();\n\t}\n\n\tfunction getProposedIdea(\n\t\taddress contractAddress\n\t) public view returns (Proposal.IdeaProposed memory) {\n\t\tProposal contractDeployed = Proposal(payable(address(contractAddress)));\n\t\treturn contractDeployed.getProposedIdea();\n\t}\n\n\tfunction fundRaised(address contractAddress) public view returns (uint256) {\n\t\tProposal contractDeployed = Proposal(payable(address(contractAddress)));\n\t\treturn contractDeployed.fundRaised();\n\t}\n\n\tfunction getFundWanted(\n\t\taddress contractAddress\n\t) public view returns (uint256) {\n\t\tProposal contractDeployed = Proposal(payable(address(contractAddress)));\n\t\treturn contractDeployed.getFundWanted();\n\t}\n\n\tfunction projectOwner() public view returns (address) {\n\t\treturn owner();\n\t}\n\n\tfunction contractBalance() public view returns (uint256) {\n\t\treturn address(this).balance;\n\t}\n\n\tfallback() external payable {}\n\n\treceive() external payable {}\n}\n"
    },
    "contracts/Proposal.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\n\r\nerror Err__Is__Contract(address);\r\nerror Err__Is__Not__Parent(address);\r\nerror Err__Is__Not__Owner(address);\r\nerror Err__Donation__Failed(address);\r\nerror Err__Withdrawal__Failed();\r\n\r\ncontract Proposal is Ownable, ReentrancyGuard, Pausable {\r\n\tstruct IdeaProposed {\r\n\t\tstring proposalName;\r\n\t\tstring idea;\r\n\t\tstring details;\r\n\t\tuint256 budgetInEth;\r\n\t\tuint256 date;\r\n\t\tuint256 expiryDate;\r\n\t}\r\n\t// Storage\r\n\taddress private immutable i_parentAddress;\r\n\tIdeaProposed private s_proposalDetails;\r\n\tmapping(address => uint256) s_donators;\r\n\t// Events\r\n\r\n\t//Modifiers\r\n\tmodifier isContract() {\r\n\t\tint256 size;\r\n\t\taddress signerAddress = tx.origin;\r\n\t\tassembly {\r\n\t\t\tsize := extcodesize(signerAddress)\r\n\t\t}\r\n\t\tif (size > 0) revert Err__Is__Contract(signerAddress);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier isParent() {\r\n\t\tif (msg.sender != i_parentAddress)\r\n\t\t\trevert Err__Is__Not__Parent(msg.sender);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier isOwner() {\r\n\t\tif (tx.origin != owner()) revert Err__Is__Not__Owner(tx.origin);\r\n\t\t_;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tstring memory proposalName,\r\n\t\tstring memory idea,\r\n\t\tstring memory details,\r\n\t\tuint256 budgetInEth,\r\n\t\tuint256 time\r\n\t) isContract() Ownable() ReentrancyGuard() Pausable() {\r\n\t\ts_proposalDetails = IdeaProposed({\r\n\t\t\tproposalName: proposalName,\r\n\t\t\tidea: idea,\r\n\t\t\tdetails: details,\r\n\t\t\tbudgetInEth: budgetInEth,\r\n\t\t\tdate: time,\r\n\t\t\texpiryDate: time + 30 days\r\n\t\t});\r\n\t\ti_parentAddress = msg.sender;\r\n\t\ttransferOwnership(tx.origin);\r\n\t}\r\n\r\n\tfunction riseFund() public payable whenNotPaused {\r\n\t\tif (\r\n\t\t\tmsg.value > getFundWanted() + 0.1 ether ||\r\n\t\t\tmsg.value <= 0 ||\r\n\t\t\tblock.timestamp > s_proposalDetails.expiryDate\r\n\t\t) revert Err__Donation__Failed(msg.sender);\r\n\t\ts_donators[tx.origin] = s_donators[tx.origin] + msg.value;\r\n\t}\r\n\r\n\tfunction withdrawFunds()\r\n\t\tpublic\r\n\t\tisParent\r\n\t\tisOwner\r\n\t\tnonReentrant\r\n\t\twhenNotPaused\r\n\t{\r\n\t\tif (\r\n\t\t\tgetFundWanted() != 0 ||\r\n\t\t\tfundRaised() < s_proposalDetails.budgetInEth ||\r\n\t\t\tblock.timestamp < s_proposalDetails.expiryDate\r\n\t\t) revert Err__Withdrawal__Failed();\r\n\r\n\t\t(bool success, ) = payable(address(owner())).call{\r\n\t\t\tvalue: address(this).balance\r\n\t\t}(\"\");\r\n\t\tif (!success) revert Err__Withdrawal__Failed();\r\n\t\t_pause();\r\n\t}\r\n\r\n\tfunction withdrawDeposits() public isParent nonReentrant {\r\n\t\tuint256 amount = s_donators[tx.origin];\r\n\t\tif (amount <= 0) revert Err__Withdrawal__Failed();\r\n\t\ts_donators[tx.origin] = 0;\r\n\t\t(bool success, ) = payable(address(tx.origin)).call{ value: amount }(\r\n\t\t\t\"\"\r\n\t\t);\r\n\t\tif (!success) revert Err__Withdrawal__Failed();\r\n\t}\r\n\r\n\tfunction updateProposal(\r\n\t\tstring memory name,\r\n\t\tstring memory idea,\r\n\t\tstring memory details,\r\n\t\tuint256 budgetInEth\r\n\t) public isParent whenNotPaused {\r\n\t\ts_proposalDetails.budgetInEth = budgetInEth;\r\n\t\ts_proposalDetails.details = details;\r\n\t\ts_proposalDetails.idea = idea;\r\n\t\ts_proposalDetails.proposalName = name;\r\n\t}\r\n\r\n\tfunction renewProposal() public isOwner isParent whenNotPaused {\r\n\t\ts_proposalDetails.expiryDate = block.timestamp + 30 days;\r\n\t}\r\n\r\n\tfunction getProposedIdea()\r\n\t\tpublic\r\n\t\tview\r\n\t\tisParent\r\n\t\treturns (IdeaProposed memory)\r\n\t{\r\n\t\treturn s_proposalDetails;\r\n\t}\r\n\r\n\tfunction fundRaised() public view isParent returns (uint256) {\r\n\t\treturn address(this).balance;\r\n\t}\r\n\r\n\tfunction getFundWanted() public view isParent returns (uint256) {\r\n\t\treturn s_proposalDetails.budgetInEth - address(this).balance;\r\n\t}\r\n\r\n\tfunction pauseContract() public isParent {\r\n\t\t_pause();\r\n\t}\r\n\r\n\tfallback() external payable {\r\n\t\triseFund();\r\n\t}\r\n\r\n\treceive() external payable {\r\n\t\triseFund();\r\n\t}\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}